#include <stdio.h>
#include <ctype.h>


float calcular(float a, float b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': 
            if (b != 0) return a / b;
            else {
                printf("Erro: divisao por zero!\n");
                return -9999;
            }
        default:
            printf("Operador invalido!\n");
            return -9999;
    }
}

int main() {
    char continuar;
    
    do {
        printf("\n--- ETAPA 3: REFINAMENTO GRADUAL ---\n");
        
        float num1, num2;
        char operador;
        
        printf("Digite o primeiro numero: ");
        scanf("%f", &num1);
        printf("Digite o segundo numero: ");
        scanf("%f", &num2);
        printf("Digite a operacao (+, -, *, /): ");
        scanf(" %c", &operador);

        float resultado = calcular(num1, num2, operador);
        if (resultado != -9999) {
            printf("Resultado: %.2f\n", resultado);
        }

        printf("\nDeseja continuar? (S/N): ");
        scanf(" %c", &continuar);
        continuar = tolower(continuar);
        
    } while (continuar == 's');

    printf("Programa encerrado.\n");
    return 0;
}

/*A abstração procedural (Etapa 2) melhorou a organização ao dividir o código em funções especializadas.
 Já o refinamento gradual (Etapa 3) levou isso a outro nível, criando uma interface única (calcular) que simplifica a expansão e manutenção.
O resultado é um código mais limpo, modular e adaptável a mudanças.*/
